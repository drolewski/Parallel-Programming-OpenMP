#include<math.h>
#include <stdio.h>
#include <omp.h>
#include <algorithm>
#define M 3
#define N 49
#define NUM_THREADS 4
# define lenght (N - 1) / 2 + 1

inline int generatePrimeNumbersArray(int solution[]) {
	int last = sqrt(N);
	int* deletionsMatrix = new int[last + 1];

	int iterator = 0;

	for (int i = 0; i <= last; i++)
		deletionsMatrix[i] = 1;
	for (int i = 2; i * i <= last; i++)
		if (deletionsMatrix[i])
			for (int j = i * i; j <= last; j += i)
				deletionsMatrix[j] = 0;
	for (int i = 3; i <= last; i++)
	{
		if (deletionsMatrix[i])
			solution[iterator++] = i;
	}
	delete[] deletionsMatrix;
	return iterator;
}

// sito z podejsciem domenowym 2 -> unikanie false sharing
inline void domain_method() {
	char* deletionsMatrix = new char[lenght];
	int solution[N / 2] = { 0 };
	int primeNumbersArray[N / 2] = { 0 };
	int primeNumbersArrayLength = generatePrimeNumbersArray(primeNumbersArray);

	for (int i = 0; i < lenght; i++)
		deletionsMatrix[i] = 1;

	omp_set_num_threads(NUM_THREADS);
	int id = 0;
	int start_num = 0;
	int left, right = 0;
	int fragmentLenght = (N - M) / NUM_THREADS;
	int restOfNumbers = (N - M) % NUM_THREADS;
	//printf("%d\n", fragmentLenght);
	char* deletionMatrixPartial;
	char** deletionPartials = new char* [NUM_THREADS];
	int iterator = M == 2 ? 1 : 0;
	solution[0] = M == 2 ? 2 : 0;
	
	for (int i = 0; i < NUM_THREADS; i++)
	{
		deletionPartials[i] = new char[fragmentLenght + restOfNumbers];
		left = M + fragmentLenght * i;
		right = M + fragmentLenght * (i + 1);
		if (i == NUM_THREADS - 1) right += restOfNumbers;
		//printf("%d:<%d,%d)\n", i, left, right);
		std::copy(deletionsMatrix + left / 2, deletionsMatrix + right / 2, deletionPartials[i]);
	}

#pragma omp parallel private(id, left, right,deletionMatrixPartial)
	{
		deletionMatrixPartial = new char[fragmentLenght + restOfNumbers];
		id = omp_get_thread_num();
		left = M + fragmentLenght * id;
		right = M + fragmentLenght * (id + 1);
		if (id == NUM_THREADS - 1) right += restOfNumbers;
		printf("%d:<%d,%d)\n", id, left, right);
		if (id == NUM_THREADS - 1)
			std::copy(deletionPartials[id], deletionPartials[id] +fragmentLenght + restOfNumbers, deletionMatrixPartial);
		else
			std::copy(deletionPartials[id], deletionPartials[id] + fragmentLenght, deletionMatrixPartial);
		for (int i = 0; i < primeNumbersArrayLength; i++)
		{
			int firstJ = left / primeNumbersArray[i];
			if (firstJ < 3) firstJ = 3;
			else firstJ = firstJ - 1 + firstJ % 2;
			//printf("%d:firstJ dla %d i %d:%d\n", id, left, primeNumbersArray[i], firstJ);
			for (int j = firstJ; primeNumbersArray[i] * j <= right; j += 2)
			{
				if (primeNumbersArray[i] * j > left)
				{
					deletionMatrixPartial[(primeNumbersArray[i] * j - left) / 2] = 0;
					//printf("%d:wykreslam %d * %d = %d z pozycji %d\n", id, primeNumbersArray[i], j, primeNumbersArray[i] * j, (primeNumbersArray[i] * j - left)/2);
				}
			}
		}
		for (int j = 0; 2 * j + left + 1 <= right; j++)
		{
			if (deletionMatrixPartial[j])
			{
				//printf("%d: zapisuje %d na %d\n", id,2 * j + left + 1 - left%2,iterator);
#pragma omp atomic
				solution[iterator] += 2 * j + 1 - left % 2 + left;
#pragma omp atomic
				iterator += 1;
			}
		}
		delete[] deletionMatrixPartial;
	}

	int found = 0;
	for (int i = 0; i < N / 2 && solution[i] != 0; i++)
	{
		if (i % 10 == 0) printf("\n");
		found = i + 1;
		printf("%d;", solution[i]);
	}
	delete[] deletionsMatrix;
	printf("\nfound %d numbers", found);
}

int main()
{
	domain_method();
}