#include<math.h>
#include <stdio.h>
#include <omp.h>
#define M 2
#define N 49
#define NUM_THREADS 4


int generatePrimeNumbersArray(int numbers[]) {
	int iterator = 0;
	for (int i = M; i <= sqrt(N); i++)
	{
		bool hasDivider = false;
		for (int j = 2; j <= sqrt(i); j++)
		{
			if (i % j == 0)
			{
				hasDivider = true;
				break;
			}
		}
		if (!hasDivider) {
			numbers[iterator] = i;
			++iterator;
		}
	}
	return iterator;
}


//Podejscie funkcyjne Rolexa -> rozdzieleniem fragmentów tablicy licz pierwszych zajmuje się pararell w checkEratostanesSieve
int main()
{
	int solution[N / 2] = { 0 };
	int iter = 0;
	if (M <= 2)
	{
		solution[0] = 2;
		iter = 1;
	}
	omp_set_num_threads(NUM_THREADS);

	int data[N / 2] = { 0 };
	int iterator = generatePrimeNumbersArray(data);
	for (int number = M + 1 - M % 2; number <= N; number += 2) {
		bool isFirst = true;
#pragma omp parallel for
		for (int i = 0; i < iterator; i++) {
			for (int j = 3; j < data[i]; j += 2) {
				for (int k = 3; k <= j; k++) {
					if (number == k * j) {
						isFirst = false;
						break;
					}
					if (k * j > number)
						break;
				}
			}

		}
		if (isFirst)
		{
			data[iterator] = number;
			++iterator;
			solution[iter] = number;
			++iter;
		}
	}

	int found = 0;
	for (int i = 0; i <= N / 2 && solution[i] != 0; i++)
	{
		if (i % 10 == 0) printf("\n");
		found = i + 1;
		printf("%d;", solution[i]);
	}
	printf("\nfound %d numbers", found);
}