#include<math.h>
#include <stdio.h>
#include <omp.h>
#define M 2
#define N 49

inline void eratosthenesParallelNaive(int lastNumber) {
	omp_set_num_threads(4);
	char* deletionsMatrix = new char[(N - 1) / 2 + 1];
	int solution[N / 2] = { 0 };
	const int sqrtN = sqrt(N);
	//#pragma omp parallel for  
	for (int i = 0; i <= (N - 1) / 2; i++)
		deletionsMatrix[i] = 1;
#pragma omp parallel for schedule(dynamic) 
	for (int i = 3; i <= sqrtN; i += 2)
		if (deletionsMatrix[i / 2])
			for (int j = i * i; j <= lastNumber; j += 2 * i)
				deletionsMatrix[j / 2] = 0;

	solution[0] = 2;
	int found = 0;
	int iterator = M == 2 ? 1 : 0;
	for (int i = M / 2; i <= (N - 1) / 2; i++)
	{
		if (i >= M / 2 && deletionsMatrix[i]) solution[iterator++] = 2 * i + 1;
	}
	for (int i = 0; i < N / 2 && solution[i] != 0; i++)
	{
		if (i % 10 == 0) printf("\n");
		found = i + 1;
		printf("%d;", solution[i]);
	}
	delete[] deletionsMatrix;
	printf("\nfound %d numbers", found);
}

int main()
{
	eratosthenesParallelNaive(N);
}